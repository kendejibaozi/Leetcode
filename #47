class Solution {
    List<List<Integer>> res = new ArrayList<>();
    List<Integer> path = new ArrayList<>();
    int[] nums;
    boolean[] visited;
    int n;
    public List<List<Integer>> permuteUnique(int[] nums) {

        this.nums = nums;
        n = nums.length;
        visited = new boolean[n];
        Arrays.sort(nums);
        dfs(0);
        return res;
    }

    private void dfs(int idx) {
        if (idx == n) {
            res.add(new ArrayList<>(path));
            return;
        }
        for (int i = 0; i < n; i++) {
            if (visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]))
                continue;
            
            visited[i] = true;
            path.add(nums[i]);
            dfs(idx + 1);
            visited[i] = false;
            path.remove(idx);
        }
    }
}
