/*
class Solution {
    public int longestSubarray(int[] nums) {

        int n = nums.length;
        int[] pre = new int[n];
        int[] post = new int[n];
        for (int i = 1; i < n; i++) {
            pre[i] = nums[i - 1] == 1 ? pre[i - 1] + 1 : 0;
        }
        for (int i = n - 2; i >= 0; i--) {
            post[i] = nums[i + 1] == 1 ? post[i + 1] + 1 : 0;
        }

        int res = 0;
        for (int i = 0; i < n; i++) {
            res = Math.max(res, pre[i] + post[i]);
        }
        return res;
    }
}
*/

class Solution {
    public int longestSubarray(int[] nums) {
        int n = nums.length, left = 0, cnt = 0, res = 0;
        for(int right = 0; right < n; right++) {
            if (nums[right] == 0) cnt++;
            while (cnt > 1) {
                if (nums[left] == 0) cnt--;
                left++;
            }
            res = Math.max(res, right - left);
        }
        return res;
    }
}
