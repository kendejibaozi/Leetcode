class Solution {
    int[][] grid;
    boolean[][] visited;
    int m, n, res, cnt_0;
    int[][] dirs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    public int uniquePathsIII(int[][] grid) {
        this.grid = grid;
        m = grid.length;
        n = grid[0].length;
        visited = new boolean[m][n];
        res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    //dfs(i, j);
                    cnt_0++;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dfs(i, j, 0);
                    //cnt_0++;
                    break;
                }
            }
        }
        return res;
    }

    private void dfs(int i, int j, int k) {
        if (grid[i][j] == 2) {
            if (k == cnt_0)  
                res++;
            return;
        }

        for (int d = 0; d < 4; d++) {
            int newx = i + dirs[d][0];
            int newy = j + dirs[d][1];
            if (newx >= 0 && newx < m && newy >= 0 && newy < n && (grid[newx][newy] == 2 || (grid[newx][newy] == 0 && !visited[newx][newy]))) {
                if (grid[newx][newy] == 0) {
                    visited[newx][newy] = true;
                    k++;
                }
                dfs(newx, newy, k);

                //huifu xianchang
                if (grid[newx][newy] == 0) {
                    visited[newx][newy] = false;
                    k--;
                }

            }
        }


    } 
}
