/*
class Solution {
    public int findLeastNumOfUniqueInts(int[] arr, int k) {

        int res = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int x : arr) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[1] == b[1]) return a[0] - b[0];
            return a[1] - b[1];
            
        });
        for (var x : map.entrySet()) {
            int i = x.getKey(), j = x.getValue();
            pq.offer(new int[]{i, j});
        }

        while (k > 0) {
            k -= pq.peek()[1];
            if (k >= 0) pq.poll();
            //res++;
        }
        return pq.size();
        

    }
}
*/

class Solution {
    public int findLeastNumOfUniqueInts(int[] arr, int k) {
        
        Map<Integer, Integer> map = new HashMap<>();
        for (var x : arr) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }

        List<Integer>[] list = new List[arr.length + 1];
        for (int x : map.keySet()) {
            int idx = map.get(x);
            if (list[idx] == null) {
                list[idx] = new ArrayList<>();
            }
            list[idx].add(x);
        }
        int res = map.size();
        int i = 0;
        while (k > 0 && i < list.length) {
            if (list[i] != null) {
                for (int j = 0; j < list[i].size(); j++) {
                    k -= i;
                    if (k >= 0) res--;
                    else break;
                }
            }
            i++;
        }
        return res;
    }
}


