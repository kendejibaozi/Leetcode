class Solution {
    int m, n, k;
    double[][] memo;
    public double champagneTower(int poured, int query_row, int query_glass) {
        this.k = poured;
        this.m = query_row;
        this.n = query_glass;
        /*
        memo = new double[m + 1][m + 1];
        for (int i = 0; i < m + 1; i++) {
            Arrays.fill(memo[i], -1);
        }
        return Math.min(dfs(m, n), 1);
        */

        double[][] dp = new double[m + 1][m + 1];
        dp[0][0] = (double)k;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                double remain = (dp[i][j] - 1.0) / 2;
                if (remain > 0) {
                    dp[i + 1][j] += remain;
                    dp[i + 1][j + 1] += remain;
                }
            }
        }
        return Math.min(dp[m][n], 1.0);
    }

    private double dfs(int i, int j) {
        if (i == 0 && j == 0) return memo[i][j] = (double)k;
        if (i < 0 || j < 0) return 0;
        if (memo[i][j] != -1) return memo[i][j];

        double left = dfs(i - 1, j - 1), right = dfs(i - 1, j);
        return memo[i][j] = ((left <= 1 ? 0 : left - 1) + (right <= 1 ? 0 : right - 1)) / 2;


    }
}
