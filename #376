/*
class Solution {
    int[] nums, up, down;
    int n;
    public int wiggleMaxLength(int[] nums) {

        this.nums = nums;
        n = nums.length;
        up = new int[n];
        down = new int[n];
        Arrays.fill(up, 1);
        Arrays.fill(down, 1);
        dfs(n - 1);
        return Math.max(up[n - 1], down[n - 1]);
    }

    private void dfs(int i) {
        if (i <= 0) return ;
        //if (i == 0) return 1;

        dfs(i - 1);

        if (nums[i] > nums[i - 1]) {
                up[i] = down[i - 1] + 1;
                down[i] = down[i - 1];
            }
        else if (nums[i] < nums[i - 1]) {
            down[i] = up[i - 1] + 1;
            up[i] = up[i - 1];
        }
        else {
            up[i] = up[i - 1];
            down[i] = down[i - 1];
        }
    }
}
*/
class Solution {
    public int wiggleMaxLength(int[] nums) {
        int n = nums.length;
        int[] up = new int[n];
        int[] down = new int[n];
        up[0] = down[0] = 1;

        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                up[i] = down[i - 1] + 1;
                down[i] = down[i - 1];
            }
            else if (nums[i] < nums[i - 1]) {
                down[i] = up[i - 1] + 1;
                up[i] = up[i - 1];
            }
            else {
                up[i] = up[i - 1];
                down[i] = down[i - 1];
            }
        }
        return Math.max(up[n - 1], down[n - 1]);
    }
}
