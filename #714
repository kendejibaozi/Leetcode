/*
class Solution {
    int[][] memo;
    int[] prices;
    int fee;
    public int maxProfit(int[] prices, int fee) {

        this.prices = prices;
        this.fee = fee;
        int n = prices.length;
        memo = new int[n][2];
        for (int i = 0; i < n; i++) {
            Arrays.fill(memo[i], -1);
        }
        return dfs(n - 1, 0);
    }

    private int dfs(int i, int c) {
        if (i < 0) return c == 0 ? 0 : Integer.MIN_VALUE / 2;
        if (memo[i][c] != -1) return memo[i][c];

        if (c == 0) return memo[i][c] = Math.max(dfs(i - 1, 0), dfs(i - 1, 1) + prices[i] - fee);
        else return memo[i][c] = Math.max(dfs(i - 1, 1), dfs(i - 1, 0) - prices[i]);
    }
}
*/
/*
class Solution {
    public int maxProfit(int[] prices, int fee) {

        int n = prices.length;
        int[][] dp = new int[n + 1][2];
        dp[0][1] = Integer.MIN_VALUE / 2;
        for (int i = 0; i < n; i++) {
            dp[i + 1][0] = Math.max(dp[i][0], dp[i][1] + prices[i] - fee);
            dp[i + 1][1] = Math.max(dp[i][1], dp[i][0] - prices[i]);
        }
        return dp[n][0];
    }
}
*/
class Solution {
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int f0 = 0, f1 = Integer.MIN_VALUE / 2;
        for (int i = 0; i < n; i++) {
            int newf0 = Math.max(f0, f1 + prices[i] - fee);
            f1 = Math.max(f1, f0 - prices[i]);
            f0 = newf0;
        }
        return f0;
    }
}
