class Solution {
    public int shortestSubarray(int[] nums, int k) {
 
        int n = nums.length;
        int res = n + 1;
        long[] temp = new long[n + 1];
        
        for (int i = 0; i < n; i++) {
            temp[i + 1] = temp[i] + nums[i];
        }

        Deque<Integer> dq = new ArrayDeque<>();
        for (int i = 0; i < n + 1; i++) {
            while (!dq.isEmpty() && temp[i] - temp[dq.peekFirst()] >= k) {
                res = Math.min(res, i - dq.pollFirst());
            }
            while (!dq.isEmpty() && temp[i] < temp[dq.peekLast()]) {
                dq.pollLast();
            }
            dq.offerLast(i);
        }
        return res > n ? -1 : res;
    }
}
