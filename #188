class Solution {
    int[][][] memo;
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n + 1][k + 2][2];
        for (int i = 0; i < n + 1; i++) {
            Arrays.fill(dp[i][0], Integer.MIN_VALUE / 2);
        }
        for (int j = 1; j < k + 2; j++) {
            dp[0][j][0] = 0;
            dp[0][j][1] = Integer.MIN_VALUE / 2;
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < k + 1; j++) {
                dp[i + 1][j + 1][0] = Math.max(dp[i][j + 1][0], dp[i][j][1] + prices[i]);
                dp[i + 1][j + 1][1] = Math.max(dp[i][j + 1][1], dp[i][j + 1][0] - prices[i]);
            }
        }
        return dp[n][k + 1][0];

    }

    private int dfs(int[] prices, int i, int c, int t) {
        if (i < 0) return c == 0 ? 0 : Integer.MIN_VALUE;
        if (t < 0) return Integer.MIN_VALUE;
        if (memo[i][t][c] != -1) return memo[i][t][c];

        if (c == 0) {
            return memo[i][t][c] = Math.max(dfs(prices, i - 1, 0, t), dfs(prices, i - 1, 1, t - 1) + prices[i]);
        }
        else {
            return memo[i][t][c] = Math.max(dfs(prices, i - 1, 1, t), dfs(prices, i - 1, 0, t) - prices[i]);
        }
    }
}
