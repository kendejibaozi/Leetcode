/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minCameraCover(TreeNode root) {
        
        int[] res = dfs(root);
        return Math.min(res[0], res[2]);
    }

    private int[] dfs(TreeNode root) {
        //0: by_self 1:by_parent 2: by_children
        if (root == null)
            return new int[]{Integer.MAX_VALUE / 2, 0, 0};
        
        int[] l = dfs(root.left);
        int[] r = dfs(root.right);
        int[] cur = new int[3];
        cur[0] = Math.min(l[0], l[1]) + Math.min(r[0], r[1]) + 1;
        cur[1] = Math.min(l[0], l[2]) + Math.min(r[0], r[2]);
        cur[2] = Math.min(l[0] + r[2], Math.min(l[2] + r[0], l[0] + r[0]));
        return cur;
    }
}
