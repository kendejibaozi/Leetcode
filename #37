
class Solution {
    boolean[][] rows, cols, boxes;
    char[][] board;
    public void solveSudoku(char[][] board) {
        this.board = board;

        rows = new boolean[9][10];
        cols = new boolean[9][10];
        boxes = new boolean[9][10];

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    int num = board[i][j] - '0';
                    mark(i, j, num);
                }
            }
        }

        dfs(0, 0);
    }

    private boolean isValid(int i, int j, int num) {
        int boxIndex = 3 * (i / 3) + j / 3;
        return !rows[i][num] && !cols[j][num] && !boxes[boxIndex][num];
    }

    private void mark(int i, int j, int num) {
        int boxIndex = 3 * (i / 3) + j / 3;
        rows[i][num] = true;
        cols[j][num] = true;
        boxes[boxIndex][num] = true;
    }

    private void unmark(int i, int j, int num) {
        int boxIndex = 3 * (i / 3) + j / 3;
        rows[i][num] = false;
        cols[j][num] = false;
        boxes[boxIndex][num] = false;
    }

    private boolean dfs(int i, int j) {
        if (j == 9) {
            j = 0;
            i++;

            if (i == 9) return true;
        }

        if (board[i][j] == '.') {
            for (int k = 1; k <= 9; k++) {
                if (isValid(i, j, k)) {
                    mark(i, j, k);
                    board[i][j] = (char)('0' + k);
                    if (dfs(i, j + 1)) return true;

                    unmark(i, j, k);
                    board[i][j] = '.';
                }
            }

        }
        else {
            return dfs(i, j + 1);
        }

        return false;
    }

}

