class Solution {
    
    int[] dirsx = {1,  0, -1, 0};
    int[] dirsy = {0, 1, 0, -1};
    
    public int numIslands(char[][] grid) {
        int m = grid.length, n = grid[0].length;
        boolean[][] isVisited = new boolean[m][n];
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1' && !isVisited[i][j]) {
                    dfs(grid, m, n, isVisited, i, j);
                    res++;
                }
            }
        }
        return res;
    }

    private void dfs(char[][] grid, int m, int n, boolean[][] isVisited, int x, int y) {
        if (x < 0 || x >= m || y < 0 || y >= n || isVisited[x][y] || grid[x][y] == '0')
        return;
        isVisited[x][y] = true;
        for (int k = 0; k < 4; k++) {
            int newx = x + dirsx[k];
            int newy = y + dirsy[k];
            dfs(grid, m, n, isVisited, newx, newy);
        }

    }
}
