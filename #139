
class Solution {
    char[] chars;
    int[] memo;
    int n, maxwordLen = 0;
    Set<String> set = new HashSet<>();
    String s;

    public boolean wordBreak(String s, List<String> wordDict) {
        //this.wordDict = wordDict;
        this.s = s;
        for (String word : wordDict) {
            set.add(word);
            maxwordLen = Math.max(maxwordLen, word.length());
        }

        chars = s.toCharArray();
        n = chars.length;
        memo = new int[n];
        Arrays.fill(memo, -1);
        return dfs(n - 1) == 1;
    }

    private int dfs(int i) {
        if (i < 0) return 1;
        if (memo[i] != -1) return memo[i];

        for (int k = 0; k <= i && k <= maxwordLen; k++) {
            if (set.contains(s.substring(i - k, i + 1))) {
                if (dfs(i - k - 1) == 1) {
                    return memo[i] = 1;
                }
            } 
        }
        return memo[i] = 0;
    }
}


/*
public class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordDictSet = new HashSet(wordDict);
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordDictSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}
*/
