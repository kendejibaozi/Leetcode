class Solution {
    public int minCostII(int[][] costs) {
        int n = costs.length, k = costs[0].length;
        int pre1_index = -1;
        int pre1_value = 0;
        int pre2_value = 0;
        
        int[][] dp = new int[n][k];
        for (int i = 0; i < n; i++) {
            //计算当前行的成本
            for (int j = 0; j < k; j++) {
                if (j == pre1_index) 
                    dp[i][j] = pre2_value + costs[i][j];
                else
                    dp[i][j] = pre1_value + costs[i][j];
            }
            //找出当前行的最小值
            int min1_value = Integer.MAX_VALUE;
            int min2_value = Integer.MAX_VALUE;
            int min1_index = -1;
            for (int x = 0; x < k; x++) {
                if (dp[i][x] < min1_value) {
                    min2_value = min1_value;
                    min1_value = dp[i][x];
                    min1_index = x;  
                }
                else if (dp[i][x] < min2_value) {
                    min2_value = dp[i][x];
                }
            }
            pre1_index = min1_index;
            pre1_value = min1_value;
            pre2_value = min2_value;
        }
        return pre1_value;
    }
}
