/*
class Solution {
    int n;
    int[] memo;
    public int numSquares(int n) {
        this.n = n;
        memo = new int[n + 1];
        Arrays.fill(memo, -1);
        return dfs(n);
    }

    private int dfs(int i) {
        if (i <= 0) return 0;
        if (memo[i] != -1) return memo[i];

        int res = i;
        for (int j = 1; j * j <= i; j++) {
            res = Math.min(res, 1 + dfs(i - j * j));
        }
        return memo[i] = res;
    }
}
*/

class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j * j <= i; j++) {
                dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
            }
        }
        return dp[n];
    }
}
