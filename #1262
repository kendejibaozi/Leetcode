/*class Solution {
    int n;
    int[] nums;    
    int[][] memo;
    public int maxSumDivThree(int[] nums) {
        this.nums = nums;
        n = nums.length;
        memo = new int[n][3];
        for (int i = 0; i < n; i++) {
            Arrays.fill(memo[i], -1);
        }
        
        return dfs(n - 1, 0);
    }

    private int dfs(int i, int c) {
        if (i < 0) return c == 0 ? 0 : Integer.MIN_VALUE;
        if (memo[i][c] != -1) return memo[i][c];

        int cur = 0;
        //bu xuan
        int notTake = dfs(i - 1, c);
        //xuan
        int take = dfs(i - 1, (c + nums[i]) % 3) + nums[i];
        return memo[i][c] = Math.max(notTake, take);
    }
}
*/

class Solution {
    public int maxSumDivThree(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n + 1][3];
        dp[0][1] = dp[0][2] = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i + 1][j] = Math.max(dp[i][j], dp[i][(j + nums[i]) % 3] + nums[i]);
            }
        }
        return dp[n][0];
    }
}
