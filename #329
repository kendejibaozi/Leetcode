class Solution {
    int[][] dirs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    int m, n, res; 
    int[][] memo, matrix;
    public int longestIncreasingPath(int[][] matrix) {
        this.matrix = matrix;
        
        m = matrix.length;
        n = matrix[0].length;
        memo = new int[m][n];
        res = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                res = Math.max(res, dfs(i, j));
            }
        }

        return res;
    }

    private int dfs(int i, int j) {
        if (memo[i][j] != 0) return memo[i][j];
        memo[i][j]++;
        for (int k = 0; k < 4; k++) {
            int newx = i + dirs[k][0];
            int newy = j + dirs[k][1];
            if (newx >= 0 && newx < m && newy >= 0 && newy < n && matrix[newx][newy] > matrix[i][j]) {
                memo[i][j] = Math.max(memo[i][j], dfs(newx, newy) + 1);
            }
        }
        return memo[i][j];
    }
}
