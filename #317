class Solution {
    public int shortestDistance(int[][] grid) {

      int[][] dirs = new int[][]{{1,0},{0,1},{0,-1},{-1,0}};
      List<int[]> buildings = new ArrayList<>();
      int m = grid.length, n = grid[0].length;

      for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
          if (grid[i][j] == 1) {
            buildings.add(new int[]{i, j});
          }
        }
      }

      int[][] totaldis = new int[m][n];
      int[][] reach = new int[m][n];

      for (var building : buildings) {
        int[][] dis = new int[m][n];
        Queue<int[]> queue = new ArrayDeque<>();
        boolean[][] visited = new boolean[m][n];

        queue.offer(building);
        visited[building[0]][building[1]] = true;

        while (!queue.isEmpty()) {
          int[] cur = queue.poll();
          int x = cur[0];
          int y = cur[1];
          for (int k = 0; k < 4; k++) {
            int newx = x + dirs[k][0];
            int newy = y + dirs[k][1];

            if (newx >= 0 && newx < m && newy >= 0 && newy < n && !visited[newx][newy] && grid[newx][newy] == 0) {
              dis[newx][newy] = dis[x][y] + 1;
              totaldis[newx][newy] += dis[newx][newy];
              reach[newx][newy]++;
              visited[newx][newy] = true;
              queue.offer(new int[]{newx, newy});
            }
          }
        }
      }
      int res = Integer.MAX_VALUE;
      for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
          if (grid[i][j] == 0 && reach[i][j] == buildings.size()) {
            res = Math.min(res, totaldis[i][j]);
          }
        }
      }
      return res == Integer.MAX_VALUE ? -1 : res;
    }
}
