class Solution {
    int[] candidates;
    int target, n;
    List<List<Integer>> res = new ArrayList<>();
    List<Integer> path = new ArrayList<>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        this.candidates = candidates;
        Arrays.sort(candidates);
        this.target = target;
        n = candidates.length;
        dfs(0, 0);
        return res;
    }

    private void dfs(int idx, int sum) {
        if (sum == target) {
            res.add(new ArrayList<>(path));
            return;
        }
        if (sum > target) return;
        for (int i = idx; i < n; i++) {
            if (i > idx && candidates[i] == candidates[i - 1]) {
                continue;
            }
            path.add(candidates[i]);
            dfs(i + 1, sum + candidates[i]);
            path.remove(path.size() - 1);
        }

    }
}
