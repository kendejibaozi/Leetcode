class Solution {
    int[] stones;
    int[][] memo;
    int n;
    public int lastStoneWeightII(int[] stones) {
        this.stones = stones;
        n = stones.length;
        int sum = 0;
        for (var x : stones) sum += x;
        int target = sum / 2;
        memo = new int[n][target + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(memo[i], -1);
        }
        int half = dfs(n - 1, target);
        return sum - 2 * half;
    }

    private int dfs(int i, int s) {
        if (i < 0) return 0;
        if (memo[i][s] != -1) return memo[i][s];
        if (stones[i] > s) return memo[i][s] = dfs(i - 1, s);
        else return memo[i][s] = Math.max(dfs(i - 1, s), dfs(i - 1, s - stones[i]) + stones[i]);
    }
}
