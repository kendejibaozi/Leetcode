
class Solution {
    public int calculate(String s) {
        Deque<Integer> nums = new ArrayDeque<>();
        Deque<Character> ops = new ArrayDeque<>();

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                int tot = c - '0';
                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {
                    //i++;
                    tot = tot * 10 + s.charAt(i + 1) - '0';
                    i++;
                }
                nums.push(tot);
            }
            else if (c == '(') {
                ops.push(c);
            }
            else if (c == ')') {
                while (ops.peek() != '(') {
                    cal(nums, ops);
                }
                ops.pop(); 
            }
            else {
                while (!ops.isEmpty() && lvl(c) <= lvl(ops.peek())) {
                    cal(nums, ops);
                }
                ops.push(c);
            }
        }
        while (!ops.isEmpty()) {
            cal(nums, ops);
        }
        return nums.pop();
    }
    private void cal(Deque<Integer> nums, Deque<Character> ops) {
        int num2 = nums.pop();
        int num1 = nums.pop();
        char op = ops.pop();
        if (op == '+') nums.push(num1 + num2);
        else if (op == '-') nums.push(num1 - num2);
        else if (op == '*') nums.push(num1 * num2);
        else nums.push(num1 / num2);
    }
    private int lvl(char c) {
        if (c == '+' || c == '-') return 1;
        else if (c == '*' || c == '/') return 2;
        else return 0;
    }
}
