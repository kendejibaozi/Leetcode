class Solution {
    int m, n;
    int res = 0;
    public int maximalRectangle(char[][] matrix) {
        
        m = matrix.length;
        n = matrix[0].length;

        int[] heights = new int[n];
        for (int i = 0; i < m; i++) {
            //遍历每一行去求84题
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1')
                    heights[j]++;
                else
                    heights[j] = 0;
            }
            //求当前行之前的最大值  
            res = Math.max(res, f(heights));
        }

        return res;
    }

    private int f(int[] heights) {
        int[] magic = new int[n + 2];
        int maxVal = 0;
        for (int i = 1; i < n + 1; i++) {
            magic[i] = heights[i - 1];
        }

        Deque<Integer> stack = new ArrayDeque<>();
        for (int i = 0; i < n + 2; i++) {
            while (!stack.isEmpty() && magic[stack.peek()] > magic[i]) {
                int h = magic[stack.pop()];
                int l = stack.peek();
                int r = i;
                maxVal = Math.max(maxVal, h * (r - l - 1));
            }
            stack.push(i);
        }

        return maxVal;
    }
}
