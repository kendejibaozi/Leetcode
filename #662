/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue<TreeNode> q = new ArrayDeque<>();
        Queue<Integer> idx = new ArrayDeque<>();
        int res = 0;
        q.offer(root);
        idx.offer(0);
        while (!q.isEmpty()) {
            int n = q.size();
            int left = 0, right = 0;
            int curMin = idx.peek();
            for (int i = 0; i < n; i++) {
                TreeNode node = q.poll();
                int index = idx.poll() - curMin;
                if (i == 0) left = index;
                if (i == n - 1) right = index;
        
                if (node.left != null) {
                    q.offer(node.left);
                    idx.offer(index * 2 + 1);
                }
                if (node.right != null) {
                    q.offer(node.right);
                    idx.offer(index * 2 + 2);
                }
            }
            res = Math.max(res, right - left + 1);
        }
        return res;
        

    }
}
