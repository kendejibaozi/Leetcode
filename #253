class Solution {
    public int minMeetingRooms(int[][] intervals) {

        /*
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        int res = 0;
        for (int[] x : intervals) {
            while (!pq.isEmpty() && pq.peek()[1] <= x[0]) {
                pq.poll();
            }
            pq.offer(x);
            res = Math.max(res, pq.size());
        }
        return res;
        */

        int n = intervals.length;
        int[] starts = new int[n];
        int[] ends = new int[n];
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        for (int i = 0; i < n; i++) {
            starts[i] = intervals[i][0];
        }
        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);
        for (int i = 0; i < n; i++) {
            ends[i] = intervals[i][1];
        }
        int i = 0, j = 0, count = 0, res = 0;
        while (i < n && j < n) {
            if (starts[i] < ends[j]) {
                i++;
                count++;
            }
            else {
                j++;
                count--;
            }
            res = Math.max(res, count);
        }
        return res;
    }
}
